/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    media: Media;
    service: Service;
    journal: Journal;
    portfolio: Portfolio;
    about: About; 
    hosting: Hosting;
    branding: Branding;
    ux: Ux;
    ai: Ai;
    development: Development;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;

  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
}

export interface Development {    
  id: string;
  title: string;
  slug: string;
  introduction: string;
  processTitle: string;
  processDescription: string;
  processImage: Media | string;
  approachTitle: string;
  approachDescription: string;
  phases: Array<{
    phaseNumber: string;
    title: string;
    icon: string;
    steps: Array<{
      number: string;
      title: string;
      description: string;
    }>;
  }>; 
  status: 'draft' | 'published';
  createdAt: string;
  updatedAt: string;
}

export interface Ux {
  id: string;
  title: string;
  description: string;
  image: Media | string | null;
  content: any;
}

export interface Ai {
  id: string;
  title: string;
  slug: string;
  introduction: string;
  innovationTitle: string;
  innovationDescription: string;
  innovationFeatures: Array<{
    title: string;
    description: string;
  }>;
  solutionsTitle: string;
  solutionsDescription: string;
  solutions: Array<{
    title: string;
    description: string;
  }>;
  costsExplanation: string;
  title2: string;
  faqTitle: string;
  faqDescription: string;
  faqs: Array<{
    question: string;
    answer: string;
  }>;
  status: 'draft' | 'published';
  createdAt: string;
  updatedAt: string;  
}
  

export interface Cookies {  
  id: string;
  title: string;
  description: string;
  content: any;
}
export interface Branding {
  id: string;
  title: string;
  description: string;
  image: Media | string | null;
  content: any;
}

export interface Hosting {
  id: string;
  title: string;
  description: string;
  image: Media | string | null;
} 


export interface Journal {
  id: string;
  title: string;
  slug: string;
  featuredImage: Media;
  excerpt: string;
  content: any;
  author: string;  
  categories: Array<{ category: string }>;
  status: 'draft' | 'published';
  createdAt: string;
  updatedAt: string;  
  publishedDate: string;
}

export interface Service {
  id: string;
  title: string;
  description: string;
  image: Media | string | null;
  link?: string;
  icon?: Media | string | null; 
  slug: string;
}

export interface Branding {
  id: string;
  title: string;
  description: string;
  image: Media | string | null;
  content: any;
} 


export interface Portfolio {
  
  title: string;
  introduction: string;
  order: number;
  image: Media | string | null;
  url: string;
  slug: string;
  about: any; 
  services: Array<{ service: string; id: string }>;
  headingProject: string;
  descriptionProject: any;
  procesDescription: any;
  procesImage: Media | string | null;
  figmalink: string;
  resultHeading: string;
  resultText: any;
  resultImage: Media | string | null;
  resultImage2: Media | string | null; 
  status: 'draft' | 'published';
  updatedAt: string;
  createdAt: string;
  publishedDate: string;

}

export interface About {
      id: string;
      title: string;
      content: any;
      image: Media | string | null;
      link?: string;
      title2: string;
      content2: any;
      image2: Media | string | null;
}

export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}

export interface Hosting {
  id: string;
  title: string;
  description: string;
  image: Media | string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}

/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}

/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}

/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}

/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}

declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}